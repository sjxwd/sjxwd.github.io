<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NumPy进阶</title>
    <link href="/2024/03/21/NumPy%E8%BF%9B%E9%98%B6/"/>
    <url>/2024/03/21/NumPy%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="1-self-argsort"><a href="#1-self-argsort" class="headerlink" title="1.  self.argsort()"></a>1.  <code>self.argsort()</code></h4><h5 id="返回值为数组排序后的索引和数据类型"><a href="#返回值为数组排序后的索引和数据类型" class="headerlink" title="返回值为数组排序后的索引和数据类型"></a>返回值为数组排序后的索引和数据类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1 = np.random.rand(<span class="hljs-number">10</span>)<br>arr2 = arr1.argsort()[-<span class="hljs-number">3</span>:][<span class="hljs-number">0</span>] <span class="hljs-comment"># 取排序后的最大的三个值的索引</span><br></code></pre></td></tr></table></figure><h4 id="2-np-random-choice"><a href="#2-np-random-choice" class="headerlink" title="2.   np.random.choice()"></a>2.   <code>np.random.choice()</code></h4><h5 id="创建数组，共有两个参数，第一个参数是范围相当于range-，第二个参数相当于生成的维度"><a href="#创建数组，共有两个参数，第一个参数是范围相当于range-，第二个参数相当于生成的维度" class="headerlink" title="创建数组，共有两个参数，第一个参数是范围相当于range()，第二个参数相当于生成的维度"></a>创建数组，共有两个参数，第一个参数是范围相当于range()，第二个参数相当于生成的维度</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">np.random.choice(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 0~4随机取三个数组成向量</span><br>np.random.choice(<span class="hljs-number">5</span>,(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 0~4随机取6个数组成2行3列的矩阵</span><br>np.random.choice([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 从数组中随机取数组成矩阵</span><br></code></pre></td></tr></table></figure><h4 id="3-np-random-shuffle-np-random-permutation"><a href="#3-np-random-shuffle-np-random-permutation" class="headerlink" title="3.  np.random.shuffle()  np.random.permutation()"></a>3.  <code>np.random.shuffle()</code>  <code>np.random.permutation()</code></h4><h5 id="均为对数组进行随机排列的函数"><a href="#均为对数组进行随机排列的函数" class="headerlink" title="均为对数组进行随机排列的函数"></a>均为对数组进行随机排列的函数</h5><ul><li>第一个函数为修改原数组的排列，结果不能赋值给一个变量</li><li>第二个函数为创造一个随机排列的数组，结果可以赋值给一个变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1 = np.arrange(<span class="hljs-number">10</span>)<br>np.random.shuffle(arr1) <span class="hljs-comment">#对arr1中的数据进行重新排列(对于二维数组用reshape转换)</span><br>np.random.permutation(<span class="hljs-number">10</span>) <span class="hljs-comment"># 直接产生一个新的随机排列的数组(对于二维数组用reshape转换)</span><br></code></pre></td></tr></table></figure><h4 id="4-np-unique"><a href="#4-np-unique" class="headerlink" title="4.  np.unique()"></a>4.  <code>np.unique()</code></h4><h5 id="去除数组里面重复的数"><a href="#去除数组里面重复的数" class="headerlink" title="去除数组里面重复的数"></a>去除数组里面重复的数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>np.unique(arr1) <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>NumPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NumPy基础</title>
    <link href="/2024/03/21/NumPy/"/>
    <url>/2024/03/21/NumPy/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="1-数组的创建、类型转换、维度转换"><a href="#1-数组的创建、类型转换、维度转换" class="headerlink" title="1.数组的创建、类型转换、维度转换"></a>1.数组的创建、类型转换、维度转换</h3><h4 id="数组创建np-arrray-np-arrange-np-random"><a href="#数组创建np-arrray-np-arrange-np-random" class="headerlink" title="数组创建np.arrray()np.arrange()np.random."></a>数组创建<code>np.arrray()</code><code>np.arrange()</code><code>np.random.</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># np.array()</span><br>arr1 = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]) <span class="hljs-comment"># 创建整型一维数组</span><br>arr2 = np.array([<span class="hljs-number">1.0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]) <span class="hljs-comment"># 创建浮点一维数组</span><br>arr3 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]) <span class="hljs-comment"># 创建二维数组行矩阵</span><br>arr4 = np.array([[<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>]]) <span class="hljs-comment"># 创建二维数组列矩阵</span><br><span class="hljs-comment"># np.arange()</span><br>arr4 = np.arange(<span class="hljs-number">10</span>) <span class="hljs-comment"># 创建1~10的一维递增数组</span><br>arr5 = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 递增数组(步长为2)</span><br><span class="hljs-comment"># np.ones()、np.zeros()</span><br>np.ones(<span class="hljs-number">3</span>) np.ones((<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 全为1的</span><br>np.zeros(<span class="hljs-number">3</span>) np.zeros((<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 全为0的</span><br><span class="hljs-number">3.14</span>*np.ones((<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 全为3.14的</span><br><br><span class="hljs-comment"># np.random 用于生成随机数组</span><br><span class="hljs-comment"># np.random.rand() # 0~1的均匀分布</span><br>np.random.rand(<span class="hljs-number">10</span>) <span class="hljs-comment"># 随机10个数据的一维数组</span><br>np.random.rand(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 随机行为3，列为3的二维数组(一个括号)</span><br><span class="hljs-comment"># np.random.random() # 浮点型</span><br>np.random.random(<span class="hljs-number">10</span>) <span class="hljs-comment"># 一维</span><br>np.random.random((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 二维(两个括号)</span><br><span class="hljs-comment"># np.random.randint() # 整型</span><br>np.random.randint(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment">#3行3列的10~100的整型二维数组</span><br><span class="hljs-comment"># np.random.normal() # 正态分布</span><br>np.random.normal(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 3行3列的符合标准正态分布的二维数组</span><br></code></pre></td></tr></table></figure><p><strong>注：之后的代码默认arr1为一维数组，arr2为二维数组。</strong></p><h4 id="数组类型转换self-astype"><a href="#数组类型转换self-astype" class="headerlink" title="数组类型转换self.astype()"></a>数组类型转换<code>self.astype()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr2 = arr1.astype(<span class="hljs-built_in">float</span>) <span class="hljs-comment"># 整型数组转换为浮点型</span><br>arr1 = arr2.astype(<span class="hljs-built_in">int</span>) <span class="hljs-comment"># 浮点转换为整型</span><br></code></pre></td></tr></table></figure><h4 id="数组维度转换self-reshape"><a href="#数组维度转换self-reshape" class="headerlink" title="数组维度转换self.reshape()"></a>数组维度转换<code>self.reshape</code>()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1 = arr2.reshape(-<span class="hljs-number">1</span>) <span class="hljs-comment"># 二维数组转换为一维数组(注意：这里的-1代表让python自动计算转换后的维度)</span><br>arr2 = arr1.reshape(<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>) <span class="hljs-comment"># 一维数组转换为二维数组(3行，-1代表自动计算维度)</span><br>arr3 = np.arrange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>) <span class="hljs-comment"># 1~10的随机一维数组转换为了2行5列的二维数组</span><br></code></pre></td></tr></table></figure><h3 id="2-数组的索引访问、修改元素"><a href="#2-数组的索引访问、修改元素" class="headerlink" title="2.数组的索引访问、修改元素"></a>2.数组的索引访问、修改元素</h3><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1[<span class="hljs-number">3</span>] = <span class="hljs-number">5</span> <span class="hljs-comment"># 用索引修改元素——一维</span><br>arr2[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>] <span class="hljs-comment"># 用索引访问元素(一个方括号——访问第2行第2列的元素)——二维</span><br></code></pre></td></tr></table></figure><h4 id="花式索引-访问多个元素"><a href="#花式索引-访问多个元素" class="headerlink" title="花式索引 (访问多个元素)"></a>花式索引 (访问多个元素)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]] <span class="hljs-comment"># 访问第一个和第三个元素——一维</span><br>arr2[[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]] <span class="hljs-comment"># 用索引访问元素(两个方括号——访问2行2列、3行3列的元素)——二维</span><br>                  <span class="hljs-comment"># 第一个[]是行,第二个[]是列</span><br></code></pre></td></tr></table></figure><h3 id="3-矩阵的切片、拷贝"><a href="#3-矩阵的切片、拷贝" class="headerlink" title="3.矩阵的切片、拷贝"></a>3.矩阵的切片、拷贝</h3><h4 id="切片-仅仅是原来数组的视图，不会创建新的变量-self"><a href="#切片-仅仅是原来数组的视图，不会创建新的变量-self" class="headerlink" title="切片 (仅仅是原来数组的视图，不会创建新的变量)   self[]"></a>切片 (仅仅是原来数组的视图，不会创建新的变量)   <code>self[]</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">arr2[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>,<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>] <span class="hljs-comment"># 取第2行到第3行,第2列到随后1列的矩阵</span><br>arr2[<span class="hljs-number">3</span>,:] <span class="hljs-comment"># 取第3行的全部 </span><br>arr2[:,<span class="hljs-number">3</span>] <span class="hljs-comment"># 取第3列的全部(但注意输出为向量而不是列矩阵，目的是为节省空间)</span><br>arr2[:,<span class="hljs-number">3</span>].reshape <span class="hljs-comment"># 提取第3列的全部且输出为列矩阵</span><br><br><span class="hljs-comment"># Numpy仅仅是原来数组的视图，不会创建新的变量</span><br>cut = arr2[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>] <span class="hljs-comment"># 切片</span><br>cut[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]=<span class="hljs-number">100</span> <span class="hljs-comment"># 修改其中的元素</span><br><span class="hljs-built_in">print</span>(arr2) <span class="hljs-comment"># 会发现原数组的相应元素也被修改了</span><br></code></pre></td></tr></table></figure><p>​结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">array([[  <span class="hljs-number">6</span>,   <span class="hljs-number">7</span>,   <span class="hljs-number">8</span>,   <span class="hljs-number">9</span>,  <span class="hljs-number">10</span>],<br>       [ <span class="hljs-number">11</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">100</span>,  <span class="hljs-number">14</span>,  <span class="hljs-number">15</span>]])<br></code></pre></td></tr></table></figure><h4 id="拷贝-创建了新的变量-self-copy"><a href="#拷贝-创建了新的变量-self-copy" class="headerlink" title="拷贝 (创建了新的变量)  self[].copy()"></a>拷贝 (创建了新的变量)  <code>self[].copy()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拷贝会创建新的变量，不会影响到原视图</span><br>copy = arr2[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>].copy <span class="hljs-comment"># 此时copy是独立的</span><br></code></pre></td></tr></table></figure><h3 id="4-数组的赋值"><a href="#4-数组的赋值" class="headerlink" title="4.数组的赋值"></a>4.数组的赋值</h3><h4 id="赋值-赋值只是绑定，不会创造新的变量"><a href="#赋值-赋值只是绑定，不会创造新的变量" class="headerlink" title="赋值(赋值只是绑定，不会创造新的变量)"></a>赋值(赋值只是绑定，不会创造新的变量)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Numpy的赋值只是绑定，不会创造新的变量</span><br>arr2 = arr1<br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(arr1) <span class="hljs-comment"># 原数组的相应元素也被修改了</span><br><br><span class="hljs-comment"># 复制数组为新的变量，仍然需要self[].copy()方法</span><br>arr2 = arr1.copy <span class="hljs-comment"># 此时arr2为一个新的变量</span><br></code></pre></td></tr></table></figure><h3 id="5-数组的变形"><a href="#5-数组的变形" class="headerlink" title="5.数组的变形"></a>5.数组的变形</h3><h4 id="数组的转置-self-T"><a href="#数组的转置-self-T" class="headerlink" title="数组的转置  self.T"></a>数组的转置  <code>self.T</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># .T只对矩阵有效，因此遇到向量要将其先转换为矩阵</span><br>arr2 = arr1.reshape(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>)<br>arr3 = arr2.T<br>arr4 = arr2.T <span class="hljs-comment"># 矩阵可以直接进行转置</span><br></code></pre></td></tr></table></figure><h4 id="数组的翻转-np-flipud-np-fliplr"><a href="#数组的翻转-np-flipud-np-fliplr" class="headerlink" title="数组的翻转  np.flipud()  np.fliplr()"></a>数组的翻转  <code>np.flipud()</code>  <code>np.fliplr()</code></h4><p>上下翻转：np.flipud()</p><p>左右翻转：np.fliplr()</p><p><strong>注：在数学上向量是竖着排列的，故而只能使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = np.flipud(arr1) <span class="hljs-comment"># 向量的翻转</span><br>arr4 = np.flipud(arr2) <span class="hljs-comment"># 矩阵上下翻转</span><br>arr5 = np.fliplr(arr2) <span class="hljs-comment"># 矩阵左右翻转</span><br></code></pre></td></tr></table></figure><h4 id="数组的拼接-np-concatenate"><a href="#数组的拼接-np-concatenate" class="headerlink" title="数组的拼接   np.concatenate()"></a>数组的拼接   <code>np.concatenate()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">np.concatenate([arr1,arr3]) <span class="hljs-comment"># 向量的拼接</span><br>np.concatenate([arr2,arr4],axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 矩阵的按列拼接，默认为axis=0(按行拼接)</span><br></code></pre></td></tr></table></figure><p><strong>注：向量和矩阵不能拼接,除非先将向量转换为矩阵</strong></p><h4 id="数组的分裂-np-split"><a href="#数组的分裂-np-split" class="headerlink" title="数组的分裂  np.split()"></a>数组的分裂  <code>np.split()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3,arr4,arr5 = np.split(arr1,[<span class="hljs-number">2</span>,<span class="hljs-number">8</span>]) <span class="hljs-comment"># 向量的分裂，从索引2到索引8截断分裂成3个向量</span><br>arr3,arr4,arr5 = np.split(arr2,[<span class="hljs-number">1</span>，<span class="hljs-number">3</span>]，axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 按列分裂矩阵，分裂后仍为矩阵</span><br></code></pre></td></tr></table></figure><h3 id="6-数组的广播机制"><a href="#6-数组的广播机制" class="headerlink" title="6.数组的广播机制"></a>6.数组的广播机制</h3><ul><li><p>向量与矩阵之间做运算，向量自动升级为行矩阵</p></li><li><p>行矩阵或列矩阵与矩阵做运算，则其被广播以适配另一个矩阵</p></li></ul><h4 id="向量与行矩阵广播"><a href="#向量与行矩阵广播" class="headerlink" title="向量与行矩阵广播"></a>向量与行矩阵广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 向量(1,y)与矩阵(x,y)运算，向量(1,y)被广播成(x,y)</span><br><span class="hljs-comment"># 行矩阵(1,y)与矩阵(x,y)运算，行矩阵(1,y)被广播成(x,y)</span><br>arr1 = np.array([-<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>]) / arr1=arr1 = np.array([[-<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>]])<br>arr2 = np.random.random((<span class="hljs-number">10</span>,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(arr1*arr2)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1([-<span class="hljs-number">100</span>,    <span class="hljs-number">0</span>,  <span class="hljs-number">100</span>])<br>arr2([[<span class="hljs-number">0.64184236</span>, <span class="hljs-number">0.92884126</span>, <span class="hljs-number">0.62543466</span>],<br>       [<span class="hljs-number">0.38378405</span>, <span class="hljs-number">0.46597221</span>, <span class="hljs-number">0.8844838</span> ],<br>       [<span class="hljs-number">0.05068026</span>, <span class="hljs-number">0.77563276</span>, <span class="hljs-number">0.92239674</span>],<br>       [<span class="hljs-number">0.91164811</span>, <span class="hljs-number">0.37592643</span>, <span class="hljs-number">0.89214386</span>],<br>       [<span class="hljs-number">0.26122901</span>, <span class="hljs-number">0.82832289</span>, <span class="hljs-number">0.30011802</span>],<br>       [<span class="hljs-number">0.50559112</span>, <span class="hljs-number">0.7080077</span> , <span class="hljs-number">0.14343618</span>],<br>       [<span class="hljs-number">0.59117364</span>, <span class="hljs-number">0.91623895</span>, <span class="hljs-number">0.46346609</span>],<br>       [<span class="hljs-number">0.7240537</span> , <span class="hljs-number">0.76051051</span>, <span class="hljs-number">0.37214717</span>],<br>       [<span class="hljs-number">0.8830629</span> , <span class="hljs-number">0.26699637</span>, <span class="hljs-number">0.99830822</span>],<br>       [<span class="hljs-number">0.75797617</span>, <span class="hljs-number">0.24014886</span>, <span class="hljs-number">0.62673243</span>]])<br>arr1*arr2[[-<span class="hljs-number">64.18423647</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">62.54346552</span>]<br>         [-<span class="hljs-number">38.37840458</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">88.44837975</span>]<br>         [ -<span class="hljs-number">5.06802583</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">92.23967399</span>]<br>         [-<span class="hljs-number">91.16481138</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">89.21438585</span>]<br>         [-<span class="hljs-number">26.12290116</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">30.01180228</span>]<br>         [-<span class="hljs-number">50.55911236</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">14.34361837</span>]<br>         [-<span class="hljs-number">59.11736439</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">46.34660855</span>]<br>         [-<span class="hljs-number">72.40537049</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">37.21471661</span>]<br>         [-<span class="hljs-number">88.30629028</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">99.83082246</span>]<br>         [-<span class="hljs-number">75.79761697</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">62.67324251</span>]]<br></code></pre></td></tr></table></figure><h4 id="列矩阵广播"><a href="#列矩阵广播" class="headerlink" title="列矩阵广播"></a>列矩阵广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列矩阵(x,1)与矩阵(x,y)运算，行矩阵(x,1)被广播成(x,y)</span><br>arr1 = np.array([-<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>]).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)<br>arr2 = np.random.random((<span class="hljs-number">3</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(arr1*arr2)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1([[-<span class="hljs-number">100</span>],<br>       [   <span class="hljs-number">0</span>],<br>       [ <span class="hljs-number">100</span>]])<br>arr2([[<span class="hljs-number">0.9519945</span> , <span class="hljs-number">0.18397963</span>, <span class="hljs-number">0.93968266</span>, <span class="hljs-number">0.17685797</span>, <span class="hljs-number">0.32871508</span>,<br>        <span class="hljs-number">0.67301183</span>, <span class="hljs-number">0.41439795</span>, <span class="hljs-number">0.94014996</span>, <span class="hljs-number">0.030653</span>  , <span class="hljs-number">0.1247722</span> ],<br>       [<span class="hljs-number">0.46747026</span>, <span class="hljs-number">0.07872123</span>, <span class="hljs-number">0.9973935</span> , <span class="hljs-number">0.73324281</span>, <span class="hljs-number">0.52697865</span>,<br>        <span class="hljs-number">0.87598351</span>, <span class="hljs-number">0.78022501</span>, <span class="hljs-number">0.06691926</span>, <span class="hljs-number">0.59863272</span>, <span class="hljs-number">0.24475252</span>],<br>       [<span class="hljs-number">0.32548395</span>, <span class="hljs-number">0.94686565</span>, <span class="hljs-number">0.53828161</span>, <span class="hljs-number">0.76247029</span>, <span class="hljs-number">0.19001698</span>,<br>        <span class="hljs-number">0.70659785</span>, <span class="hljs-number">0.76300795</span>, <span class="hljs-number">0.75767884</span>, <span class="hljs-number">0.94524973</span>, <span class="hljs-number">0.18782533</span>]])<br>arr1*arr2[[-<span class="hljs-number">95.19944981</span> -<span class="hljs-number">18.39796349</span> -<span class="hljs-number">93.96826555</span> -<span class="hljs-number">17.68579675</span> -<span class="hljs-number">32.8715077</span><br>          -<span class="hljs-number">67.30118339</span> -<span class="hljs-number">41.43979544</span> -<span class="hljs-number">94.01499577</span>  -<span class="hljs-number">3.0653003</span>  -<span class="hljs-number">12.47722005</span>]<br>          [  <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span><br>            <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>        ]<br>          [ <span class="hljs-number">32.54839531</span>  <span class="hljs-number">94.68656469</span>  <span class="hljs-number">53.82816071</span>  <span class="hljs-number">76.2470291</span>   <span class="hljs-number">19.00169753</span><br>           <span class="hljs-number">70.65978472</span>  <span class="hljs-number">76.30079538</span>  <span class="hljs-number">75.76788372</span>  <span class="hljs-number">94.52497266</span>  <span class="hljs-number">18.78253268</span>]]<br></code></pre></td></tr></table></figure><h4 id="行列矩阵同时广播"><a href="#行列矩阵同时广播" class="headerlink" title="行列矩阵同时广播"></a>行列矩阵同时广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 行矩阵(1,y)与列矩阵(x,1)运算，都被广播成(x,y)</span><br></code></pre></td></tr></table></figure><p><strong>注：这里所有的乘积可以理解为逐元素相乘，与乘积顺序无关，并不是线性代数中的矩阵乘法</strong></p><p>比如：行矩阵(1,y)与列矩阵(x,1)相乘，不管顺序，都会得到一个3行3列的矩阵</p><h3 id="7-数组的函数"><a href="#7-数组的函数" class="headerlink" title="7.数组的函数"></a>7.数组的函数</h3><h4 id="矩阵乘积函数-np-out-——内积-np-outer——外积"><a href="#矩阵乘积函数-np-out-——内积-np-outer——外积" class="headerlink" title="矩阵乘积函数  np.out()——内积  np.outer——外积"></a>矩阵乘积函数  <code>np.out()</code>——内积  <code>np.outer</code>——外积</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 此为线性代数中的乘积函数</span><br>np.out(arr2,arr3) <span class="hljs-comment"># 矩阵的内积</span><br>np.outer(arr2,arr3) <span class="hljs-comment"># 矩阵的外积</span><br></code></pre></td></tr></table></figure><h4 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h4><p> <code>np.abs()</code></p><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><p><code>np.sin()  np.cos()  np.tan()  </code></p><h4 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h4><p><code>np.exp(x)</code>——e的x次方</p><h4 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h4><p><code>np.log(x)</code>——10为底</p><p><code>np.log(x)/np.log(2)</code>——2为底</p><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">np.<span class="hljs-built_in">max</span>(arr,axis=<span class="hljs-number">1</span>)/np.<span class="hljs-built_in">min</span>(arr,axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 按列寻找最大/小值，输出为每一列的最大值</span><br>np.<span class="hljs-built_in">max</span>(arr) <span class="hljs-comment"># 整体最大值</span><br>np.<span class="hljs-built_in">sum</span>()<br>mp.mean()<br>np.std() <span class="hljs-comment"># 标准差函数</span><br><br><span class="hljs-comment"># 有缺失值时</span><br>np.nansum()  np.nanmean()<br></code></pre></td></tr></table></figure><h3 id="8-布尔型数组"><a href="#8-布尔型数组" class="headerlink" title="8.布尔型数组"></a>8.布尔型数组</h3><h4 id="创建布尔型数组"><a href="#创建布尔型数组" class="headerlink" title="创建布尔型数组"></a>创建布尔型数组</h4><p>用普通数组与数比较大小产生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = arr1&gt;<span class="hljs-number">3</span><br><br><span class="hljs-comment"># and:&amp;</span><br><span class="hljs-comment"># or:|</span><br><span class="hljs-comment"># not:~</span><br>np.<span class="hljs-built_in">sum</span>() <span class="hljs-comment"># 统计true的数量</span><br>np.<span class="hljs-built_in">any</span>() <span class="hljs-comment"># 有一个true则返回true</span><br>np.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 全为true则返回true</span><br></code></pre></td></tr></table></figure><h4 id="布尔型数组作为掩码"><a href="#布尔型数组作为掩码" class="headerlink" title="布尔型数组作为掩码"></a>布尔型数组作为掩码</h4><p>普通数组与布尔型数组维度相同，可以将布尔型数组作为普通数组的掩码。这样可以对普通数组中的元素作筛选。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = arr1&gt;<span class="hljs-number">3</span> <span class="hljs-comment"># arr3为布尔型数组</span><br>arr4 = arr1[arr3] <span class="hljs-comment"># 输出为arr1&gt;4的元素</span><br></code></pre></td></tr></table></figure><p><strong>注：矩阵进行掩码操作后,退化为了向量</strong></p><h4 id="满足条件的元素所在位置-np-where"><a href="#满足条件的元素所在位置-np-where" class="headerlink" title="满足条件的元素所在位置  np.where()"></a>满足条件的元素所在位置  <code>np.where()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># np.where()输出元素的索引,返回两个值,第一个是索引值，第二个是数据类型</span><br>np.where(arr1&gt;<span class="hljs-number">3</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment"># 只输出索引值</span><br></code></pre></td></tr></table></figure><h4 id="9-从数组到张量"><a href="#9-从数组到张量" class="headerlink" title="9.从数组到张量"></a>9.从数组到张量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 相互转换</span><br>ts = torch.tensor(arr)<br>arr = np.array(ts)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sjxwd/my_blog_picture@main/img/image-20240321160704516.png" alt="PyTorch修正NumPy函数或方法"></p><p> <strong>声明：以上图及部分内容来自b站up主[“爆肝杰哥”](<a href="https://space.bilibili.com/358229576">爆肝杰哥的个人空间-爆肝杰哥个人主页-哔哩哔哩视频 (bilibili.com)</a>)</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>NumPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NumPy基础</title>
    <link href="/2024/03/21/NumPy%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/03/21/NumPy%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<hr><h3 id="1-数组的创建、类型转换、维度转换"><a href="#1-数组的创建、类型转换、维度转换" class="headerlink" title="1.数组的创建、类型转换、维度转换"></a>1.数组的创建、类型转换、维度转换</h3><h4 id="数组创建np-arrray-np-arrange-np-random"><a href="#数组创建np-arrray-np-arrange-np-random" class="headerlink" title="数组创建np.arrray()np.arrange()np.random."></a>数组创建<code>np.arrray()</code><code>np.arrange()</code><code>np.random.</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># np.array()</span><br>arr1 = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]) <span class="hljs-comment"># 创建整型一维数组</span><br>arr2 = np.array([<span class="hljs-number">1.0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]) <span class="hljs-comment"># 创建浮点一维数组</span><br>arr3 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]) <span class="hljs-comment"># 创建二维数组行矩阵</span><br>arr4 = np.array([[<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>]]) <span class="hljs-comment"># 创建二维数组列矩阵</span><br><span class="hljs-comment"># np.arange()</span><br>arr4 = np.arange(<span class="hljs-number">10</span>) <span class="hljs-comment"># 创建1~10的一维递增数组</span><br>arr5 = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># 递增数组(步长为2)</span><br><span class="hljs-comment"># np.ones()、np.zeros()</span><br>np.ones(<span class="hljs-number">3</span>) np.ones((<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 全为1的</span><br>np.zeros(<span class="hljs-number">3</span>) np.zeros((<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 全为0的</span><br><span class="hljs-number">3.14</span>*np.ones((<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)) / np.full((<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),<span class="hljs-number">3.14</span>) <span class="hljs-comment"># 全为3.14的</span><br>np.ones_like(arr1) np.zeros_like(arr1) <span class="hljs-comment"># 填充数字</span><br>np.full_like(arr1,<span class="hljs-number">3.14</span>) <br><br><span class="hljs-comment"># np.random 用于生成随机数组</span><br><span class="hljs-comment"># np.random.rand() # 0~1的均匀分布</span><br>np.random.rand(<span class="hljs-number">10</span>) <span class="hljs-comment"># 随机10个数据的一维数组</span><br>np.random.rand(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 随机行为3，列为3的二维数组(一个括号)</span><br><span class="hljs-comment"># np.random.random() # 浮点型</span><br>np.random.random(<span class="hljs-number">10</span>) <span class="hljs-comment"># 一维</span><br>np.random.random((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 二维(两个括号)</span><br><span class="hljs-comment"># np.random.randint() # 整型</span><br>np.random.randint(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment">#3行3列的10~100的整型二维数组</span><br><span class="hljs-comment"># np.random.normal() # 正态分布</span><br>np.random.normal(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)) <span class="hljs-comment"># 3行3列的符合标准正态分布的二维数组</span><br></code></pre></td></tr></table></figure><p><strong>注：之后的代码默认arr1为一维数组，arr2为二维数组。</strong></p><h4 id="数组类型转换self-astype"><a href="#数组类型转换self-astype" class="headerlink" title="数组类型转换self.astype()"></a>数组类型转换<code>self.astype()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr2 = arr1.astype(<span class="hljs-built_in">float</span>) <span class="hljs-comment"># 整型数组转换为浮点型</span><br>arr1 = arr2.astype(<span class="hljs-built_in">int</span>) <span class="hljs-comment"># 浮点转换为整型</span><br></code></pre></td></tr></table></figure><h4 id="数组维度转换self-reshape"><a href="#数组维度转换self-reshape" class="headerlink" title="数组维度转换self.reshape()"></a>数组维度转换<code>self.reshape</code>()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1 = arr2.reshape(-<span class="hljs-number">1</span>) <span class="hljs-comment"># 二维数组转换为一维数组(注意：这里的-1代表让python自动计算转换后的维度)</span><br>arr2 = arr1.reshape(<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>) <span class="hljs-comment"># 一维数组转换为二维数组(3行，-1代表自动计算维度)</span><br>arr3 = np.arrange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>) <span class="hljs-comment"># 1~10的随机一维数组转换为了2行5列的二维数组</span><br></code></pre></td></tr></table></figure><h3 id="2-数组的索引访问、修改元素"><a href="#2-数组的索引访问、修改元素" class="headerlink" title="2.数组的索引访问、修改元素"></a>2.数组的索引访问、修改元素</h3><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1[<span class="hljs-number">3</span>] = <span class="hljs-number">5</span> <span class="hljs-comment"># 用索引修改元素——一维</span><br>arr2[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>] <span class="hljs-comment"># 用索引访问元素(一个方括号——访问第2行第2列的元素)——二维</span><br></code></pre></td></tr></table></figure><h4 id="花式索引-访问多个元素"><a href="#花式索引-访问多个元素" class="headerlink" title="花式索引 (访问多个元素)"></a>花式索引 (访问多个元素)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1[[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]] <span class="hljs-comment"># 访问第一个和第三个元素——一维</span><br>arr2[[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]] <span class="hljs-comment"># 用索引访问元素(两个方括号——访问2行2列、3行3列的元素)——二维</span><br>                  <span class="hljs-comment"># 第一个[]是行,第二个[]是列</span><br></code></pre></td></tr></table></figure><h3 id="3-矩阵的切片、拷贝"><a href="#3-矩阵的切片、拷贝" class="headerlink" title="3.矩阵的切片、拷贝"></a>3.矩阵的切片、拷贝</h3><h4 id="切片-仅仅是原来数组的视图，不会创建新的变量-self"><a href="#切片-仅仅是原来数组的视图，不会创建新的变量-self" class="headerlink" title="切片 (仅仅是原来数组的视图，不会创建新的变量)   self[]"></a>切片 (仅仅是原来数组的视图，不会创建新的变量)   <code>self[]</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">arr2[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>,<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>] <span class="hljs-comment"># 取第2行到第3行,第2列到随后1列的矩阵</span><br>arr2[<span class="hljs-number">3</span>,:] <span class="hljs-comment"># 取第3行的全部 </span><br>arr2[:,<span class="hljs-number">3</span>] <span class="hljs-comment"># 取第3列的全部(但注意输出为向量而不是列矩阵，目的是为节省空间)</span><br>arr2[:,<span class="hljs-number">3</span>].reshape <span class="hljs-comment"># 提取第3列的全部且输出为列矩阵</span><br><br><span class="hljs-comment"># Numpy仅仅是原来数组的视图，不会创建新的变量</span><br>cut = arr2[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>] <span class="hljs-comment"># 切片</span><br>cut[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]=<span class="hljs-number">100</span> <span class="hljs-comment"># 修改其中的元素</span><br><span class="hljs-built_in">print</span>(arr2) <span class="hljs-comment"># 会发现原数组的相应元素也被修改了</span><br></code></pre></td></tr></table></figure><p>​结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">array([[  <span class="hljs-number">6</span>,   <span class="hljs-number">7</span>,   <span class="hljs-number">8</span>,   <span class="hljs-number">9</span>,  <span class="hljs-number">10</span>],<br>       [ <span class="hljs-number">11</span>,  <span class="hljs-number">12</span>, <span class="hljs-number">100</span>,  <span class="hljs-number">14</span>,  <span class="hljs-number">15</span>]])<br></code></pre></td></tr></table></figure><h4 id="拷贝-创建了新的变量-self-copy"><a href="#拷贝-创建了新的变量-self-copy" class="headerlink" title="拷贝 (创建了新的变量)  self[].copy()"></a>拷贝 (创建了新的变量)  <code>self[].copy()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拷贝会创建新的变量，不会影响到原视图</span><br>copy = arr2[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>].copy <span class="hljs-comment"># 此时copy是独立的</span><br></code></pre></td></tr></table></figure><h3 id="4-数组的赋值"><a href="#4-数组的赋值" class="headerlink" title="4.数组的赋值"></a>4.数组的赋值</h3><h4 id="赋值-赋值只是绑定，不会创造新的变量"><a href="#赋值-赋值只是绑定，不会创造新的变量" class="headerlink" title="赋值(赋值只是绑定，不会创造新的变量)"></a>赋值(赋值只是绑定，不会创造新的变量)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Numpy的赋值只是绑定，不会创造新的变量</span><br>arr2 = arr1<br>arr2[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(arr1) <span class="hljs-comment"># 原数组的相应元素也被修改了</span><br><br><span class="hljs-comment"># 复制数组为新的变量，仍然需要self[].copy()方法</span><br>arr2 = arr1.copy <span class="hljs-comment"># 此时arr2为一个新的变量</span><br></code></pre></td></tr></table></figure><h3 id="5-数组的变形"><a href="#5-数组的变形" class="headerlink" title="5.数组的变形"></a>5.数组的变形</h3><h4 id="数组的转置-self-T"><a href="#数组的转置-self-T" class="headerlink" title="数组的转置  self.T"></a>数组的转置  <code>self.T</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># .T只对矩阵有效，因此遇到向量要将其先转换为矩阵</span><br>arr2 = arr1.reshape(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>)<br>arr3 = arr2.T<br>arr4 = arr2.T <span class="hljs-comment"># 矩阵可以直接进行转置</span><br></code></pre></td></tr></table></figure><h4 id="数组的翻转-np-flipud-np-fliplr"><a href="#数组的翻转-np-flipud-np-fliplr" class="headerlink" title="数组的翻转  np.flipud()  np.fliplr()"></a>数组的翻转  <code>np.flipud()</code>  <code>np.fliplr()</code></h4><p>上下翻转：np.flipud()</p><p>左右翻转：np.fliplr()</p><p><strong>注：在数学上向量是竖着排列的，故而只能使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = np.flipud(arr1) <span class="hljs-comment"># 向量的翻转</span><br>arr4 = np.flipud(arr2) <span class="hljs-comment"># 矩阵上下翻转</span><br>arr5 = np.fliplr(arr2) <span class="hljs-comment"># 矩阵左右翻转</span><br></code></pre></td></tr></table></figure><h4 id="数组的拼接-np-concatenate"><a href="#数组的拼接-np-concatenate" class="headerlink" title="数组的拼接   np.concatenate()"></a>数组的拼接   <code>np.concatenate()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">np.concatenate([arr1,arr3]) <span class="hljs-comment"># 向量的拼接</span><br>np.concatenate([arr2,arr4],axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 矩阵的按列拼接，默认为axis=0(按行拼接)</span><br></code></pre></td></tr></table></figure><p><strong>注：向量和矩阵不能拼接,除非先将向量转换为矩阵</strong></p><h4 id="数组的分裂-np-split"><a href="#数组的分裂-np-split" class="headerlink" title="数组的分裂  np.split()"></a>数组的分裂  <code>np.split()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3,arr4,arr5 = np.split(arr1,[<span class="hljs-number">2</span>,<span class="hljs-number">8</span>]) <span class="hljs-comment"># 向量的分裂，从索引2到索引8截断分裂成3个向量</span><br>arr3,arr4,arr5 = np.split(arr2,[<span class="hljs-number">1</span>，<span class="hljs-number">3</span>]，axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 按列分裂矩阵，分裂后仍为矩阵</span><br></code></pre></td></tr></table></figure><h3 id="6-数组的广播机制"><a href="#6-数组的广播机制" class="headerlink" title="6.数组的广播机制"></a>6.数组的广播机制</h3><ul><li><p>向量与矩阵之间做运算，向量自动升级为行矩阵</p></li><li><p>行矩阵或列矩阵与矩阵做运算，则其被广播以适配另一个矩阵</p></li></ul><h4 id="向量与行矩阵广播"><a href="#向量与行矩阵广播" class="headerlink" title="向量与行矩阵广播"></a>向量与行矩阵广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 向量(1,y)与矩阵(x,y)运算，向量(1,y)被广播成(x,y)</span><br><span class="hljs-comment"># 行矩阵(1,y)与矩阵(x,y)运算，行矩阵(1,y)被广播成(x,y)</span><br>arr1 = np.array([-<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>]) / arr1=arr1 = np.array([[-<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>]])<br>arr2 = np.random.random((<span class="hljs-number">10</span>,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(arr1*arr2)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1([-<span class="hljs-number">100</span>,    <span class="hljs-number">0</span>,  <span class="hljs-number">100</span>])<br>arr2([[<span class="hljs-number">0.64184236</span>, <span class="hljs-number">0.92884126</span>, <span class="hljs-number">0.62543466</span>],<br>       [<span class="hljs-number">0.38378405</span>, <span class="hljs-number">0.46597221</span>, <span class="hljs-number">0.8844838</span> ],<br>       [<span class="hljs-number">0.05068026</span>, <span class="hljs-number">0.77563276</span>, <span class="hljs-number">0.92239674</span>],<br>       [<span class="hljs-number">0.91164811</span>, <span class="hljs-number">0.37592643</span>, <span class="hljs-number">0.89214386</span>],<br>       [<span class="hljs-number">0.26122901</span>, <span class="hljs-number">0.82832289</span>, <span class="hljs-number">0.30011802</span>],<br>       [<span class="hljs-number">0.50559112</span>, <span class="hljs-number">0.7080077</span> , <span class="hljs-number">0.14343618</span>],<br>       [<span class="hljs-number">0.59117364</span>, <span class="hljs-number">0.91623895</span>, <span class="hljs-number">0.46346609</span>],<br>       [<span class="hljs-number">0.7240537</span> , <span class="hljs-number">0.76051051</span>, <span class="hljs-number">0.37214717</span>],<br>       [<span class="hljs-number">0.8830629</span> , <span class="hljs-number">0.26699637</span>, <span class="hljs-number">0.99830822</span>],<br>       [<span class="hljs-number">0.75797617</span>, <span class="hljs-number">0.24014886</span>, <span class="hljs-number">0.62673243</span>]])<br>arr1*arr2[[-<span class="hljs-number">64.18423647</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">62.54346552</span>]<br>         [-<span class="hljs-number">38.37840458</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">88.44837975</span>]<br>         [ -<span class="hljs-number">5.06802583</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">92.23967399</span>]<br>         [-<span class="hljs-number">91.16481138</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">89.21438585</span>]<br>         [-<span class="hljs-number">26.12290116</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">30.01180228</span>]<br>         [-<span class="hljs-number">50.55911236</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">14.34361837</span>]<br>         [-<span class="hljs-number">59.11736439</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">46.34660855</span>]<br>         [-<span class="hljs-number">72.40537049</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">37.21471661</span>]<br>         [-<span class="hljs-number">88.30629028</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">99.83082246</span>]<br>         [-<span class="hljs-number">75.79761697</span>   <span class="hljs-number">0.</span>          <span class="hljs-number">62.67324251</span>]]<br></code></pre></td></tr></table></figure><h4 id="列矩阵广播"><a href="#列矩阵广播" class="headerlink" title="列矩阵广播"></a>列矩阵广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列矩阵(x,1)与矩阵(x,y)运算，行矩阵(x,1)被广播成(x,y)</span><br>arr1 = np.array([-<span class="hljs-number">100</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>]).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)<br>arr2 = np.random.random((<span class="hljs-number">3</span>,<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(arr1*arr2)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1([[-<span class="hljs-number">100</span>],<br>       [   <span class="hljs-number">0</span>],<br>       [ <span class="hljs-number">100</span>]])<br>arr2([[<span class="hljs-number">0.9519945</span> , <span class="hljs-number">0.18397963</span>, <span class="hljs-number">0.93968266</span>, <span class="hljs-number">0.17685797</span>, <span class="hljs-number">0.32871508</span>,<br>        <span class="hljs-number">0.67301183</span>, <span class="hljs-number">0.41439795</span>, <span class="hljs-number">0.94014996</span>, <span class="hljs-number">0.030653</span>  , <span class="hljs-number">0.1247722</span> ],<br>       [<span class="hljs-number">0.46747026</span>, <span class="hljs-number">0.07872123</span>, <span class="hljs-number">0.9973935</span> , <span class="hljs-number">0.73324281</span>, <span class="hljs-number">0.52697865</span>,<br>        <span class="hljs-number">0.87598351</span>, <span class="hljs-number">0.78022501</span>, <span class="hljs-number">0.06691926</span>, <span class="hljs-number">0.59863272</span>, <span class="hljs-number">0.24475252</span>],<br>       [<span class="hljs-number">0.32548395</span>, <span class="hljs-number">0.94686565</span>, <span class="hljs-number">0.53828161</span>, <span class="hljs-number">0.76247029</span>, <span class="hljs-number">0.19001698</span>,<br>        <span class="hljs-number">0.70659785</span>, <span class="hljs-number">0.76300795</span>, <span class="hljs-number">0.75767884</span>, <span class="hljs-number">0.94524973</span>, <span class="hljs-number">0.18782533</span>]])<br>arr1*arr2[[-<span class="hljs-number">95.19944981</span> -<span class="hljs-number">18.39796349</span> -<span class="hljs-number">93.96826555</span> -<span class="hljs-number">17.68579675</span> -<span class="hljs-number">32.8715077</span><br>          -<span class="hljs-number">67.30118339</span> -<span class="hljs-number">41.43979544</span> -<span class="hljs-number">94.01499577</span>  -<span class="hljs-number">3.0653003</span>  -<span class="hljs-number">12.47722005</span>]<br>          [  <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span><br>            <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>           <span class="hljs-number">0.</span>        ]<br>          [ <span class="hljs-number">32.54839531</span>  <span class="hljs-number">94.68656469</span>  <span class="hljs-number">53.82816071</span>  <span class="hljs-number">76.2470291</span>   <span class="hljs-number">19.00169753</span><br>           <span class="hljs-number">70.65978472</span>  <span class="hljs-number">76.30079538</span>  <span class="hljs-number">75.76788372</span>  <span class="hljs-number">94.52497266</span>  <span class="hljs-number">18.78253268</span>]]<br></code></pre></td></tr></table></figure><h4 id="行列矩阵同时广播"><a href="#行列矩阵同时广播" class="headerlink" title="行列矩阵同时广播"></a>行列矩阵同时广播</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 行矩阵(1,y)与列矩阵(x,1)运算，都被广播成(x,y)</span><br></code></pre></td></tr></table></figure><p><strong>注：这里所有的乘积可以理解为逐元素相乘，与乘积顺序无关，并不是线性代数中的矩阵乘法</strong></p><p>比如：行矩阵(1,y)与列矩阵(x,1)相乘，不管顺序，都会得到一个3行3列的矩阵</p><h3 id="7-数组的函数"><a href="#7-数组的函数" class="headerlink" title="7.数组的函数"></a>7.数组的函数</h3><h4 id="矩阵乘积函数-np-out-——内积-np-outer——外积"><a href="#矩阵乘积函数-np-out-——内积-np-outer——外积" class="headerlink" title="矩阵乘积函数  np.out()——内积  np.outer——外积"></a>矩阵乘积函数  <code>np.out()</code>——内积  <code>np.outer</code>——外积</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 此为线性代数中的乘积函数</span><br>np.out(arr2,arr3) <span class="hljs-comment"># 矩阵的内积</span><br>np.outer(arr2,arr3) <span class="hljs-comment"># 矩阵的外积</span><br></code></pre></td></tr></table></figure><h4 id="绝对值函数"><a href="#绝对值函数" class="headerlink" title="绝对值函数"></a>绝对值函数</h4><p> <code>np.abs()</code></p><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><p><code>np.sin()  np.cos()  np.tan()  </code></p><h4 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h4><p><code>np.exp(x)</code>——e的x次方</p><h4 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h4><p><code>np.log(x)</code>——10为底</p><p><code>np.log(x)/np.log(2)</code>——2为底</p><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">np.<span class="hljs-built_in">max</span>(arr,axis=<span class="hljs-number">1</span>)/np.<span class="hljs-built_in">min</span>(arr,axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 按列寻找最大/小值，输出为每一列的最大值</span><br>np.<span class="hljs-built_in">max</span>(arr) <span class="hljs-comment"># 整体最大值</span><br>np.<span class="hljs-built_in">sum</span>()<br>mp.mean()<br>np.std() <span class="hljs-comment"># 标准差函数</span><br>np.var()<br>np.average()<br>np.prod() <span class="hljs-comment"># 所有元素的乘积</span><br>np.cumsum() <span class="hljs-comment"># 从0开始的元素累加</span><br>np.cumprod() <span class="hljs-comment"># 从1开始的元素累积</span><br>np.median()<br>np.argmax() / np.argmin() <span class="hljs-comment"># 输出索引位置</span><br><span class="hljs-comment"># 有缺失值时</span><br>np.nansum()  np.nanmean()<br></code></pre></td></tr></table></figure><h3 id="8-布尔型数组"><a href="#8-布尔型数组" class="headerlink" title="8.布尔型数组"></a>8.布尔型数组</h3><h4 id="创建布尔型数组"><a href="#创建布尔型数组" class="headerlink" title="创建布尔型数组"></a>创建布尔型数组</h4><p>用普通数组与数比较大小产生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = arr1&gt;<span class="hljs-number">3</span><br><br><span class="hljs-comment"># and:&amp;</span><br><span class="hljs-comment"># or:|</span><br><span class="hljs-comment"># not:~</span><br>np.<span class="hljs-built_in">sum</span>() <span class="hljs-comment"># 统计true的数量</span><br>np.<span class="hljs-built_in">any</span>() <span class="hljs-comment"># 有一个true则返回true</span><br>np.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 全为true则返回true</span><br></code></pre></td></tr></table></figure><h4 id="布尔型数组作为掩码"><a href="#布尔型数组作为掩码" class="headerlink" title="布尔型数组作为掩码"></a>布尔型数组作为掩码</h4><p>普通数组与布尔型数组维度相同，可以将布尔型数组作为普通数组的掩码。这样可以对普通数组中的元素作筛选。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = arr1&gt;<span class="hljs-number">3</span> <span class="hljs-comment"># arr3为布尔型数组</span><br>arr4 = arr1[arr3] <span class="hljs-comment"># 输出为arr1&gt;4的元素</span><br></code></pre></td></tr></table></figure><p><strong>注：矩阵进行掩码操作后,退化为了向量</strong></p><h4 id="满足条件的元素所在位置及修改-np-where"><a href="#满足条件的元素所在位置及修改-np-where" class="headerlink" title="满足条件的元素所在位置及修改  np.where()"></a>满足条件的元素所在位置及修改  <code>np.where()</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># np.where()输出元素的索引,返回两个值,第一个是索引值，第二个是数据类型</span><br>np.where(arr1&gt;<span class="hljs-number">3</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment"># 只输出索引值</span><br>np.where(arr1&gt;<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>) <span class="hljs-comment"># 将arr1&gt;3的赋值1，其余为0 </span><br></code></pre></td></tr></table></figure><h4 id="9-从数组到张量"><a href="#9-从数组到张量" class="headerlink" title="9.从数组到张量"></a>9.从数组到张量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 相互转换</span><br>ts = torch.tensor(arr)<br>arr = np.array(ts)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/sjxwd/my_blog_picture@main/img/image-20240321160704516.png" alt="PyTorch修正NumPy函数或方法"></p><p> <strong>声明：以上图及部分内容来自b站up主[“爆肝杰哥”](<a href="https://space.bilibili.com/358229576">爆肝杰哥的个人空间-爆肝杰哥个人主页-哔哩哔哩视频 (bilibili.com)</a>)</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>NumPy</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>短诗句收藏</title>
    <link href="/2024/03/15/%E7%9F%AD%E8%AF%97%E5%8F%A5%E6%94%B6%E8%97%8F/"/>
    <url>/2024/03/15/%E7%9F%AD%E8%AF%97%E5%8F%A5%E6%94%B6%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>《来如风雨，去似微尘》</strong></p><p><strong>【适用主题】</strong></p><p>珍惜时光、对生命意义的思考等。</p><p><strong>【释义】</strong></p><p>出自《增广贤文》，意思为：人生短暂，来的时候像风雨匆忙，去的时候又如微尘一样寂静无声。</p><p><strong>02</strong></p><p><strong>《希君生羽翼，一化北溟鱼》</strong></p><p><strong>【适用主题】</strong></p><p>表达美好祝愿，对未来的期许等。</p><p><strong>【适用主题】</strong></p><p>出自李白《江夏使君叔席上赠史郎中》，意思是祝愿你无畏前路艰险，沉潜于海，有朝一日终能张开巨大羽翼，向着光和梦想飞翔。</p><p><img src="https://pic2.zhimg.com/v2-b41b334c05cd8ac44a1c62e395b4f790_720w.jpg?source=d16d100b"></p><p><strong>03</strong></p><p><strong>《人间有味是清欢》</strong></p><p><strong>【适用主题】</strong></p><p>平淡的幸福，从容有度的生活等。</p><p><strong>【适用主题】</strong></p><p>出自苏轼的《浣溪沙·细雨斜风作晓寒》，意思是生活中一些清馨淡雅的时刻，才是最有味道的人生。</p><p><strong>04</strong></p><p><strong>《浮舟沧海，立马昆仑》</strong></p><p><strong>【适用主题】</strong></p><p>气魄雄健，豪情奔放，为中国崛起而奋斗等。</p><p><strong>【释义】</strong></p><p>传承出自周恩来的一副自勉联，意思在大海上划船，在昆仑山处立马。可用来比喻青年们胸怀大志、报效祖国的热忱。</p><p><img src="https://pic3.zhimg.com/v2-c93590b38851487a868fb67add4358f1_720w.jpg?source=d16d100b"></p><p><strong>05</strong></p><p><strong>《青春须早为，岂能长少年》</strong></p><p><strong>【适用主题】</strong></p><p>回忆青春，珍惜时光，奋发有为等。</p><p><strong>【释义】</strong></p><p>出自孟郊的《劝学》，意为：青春年少时期就应趁早努力，一个人难道能够永远都是“少年”吗？</p><p><strong>06</strong></p><p><strong>《红日初升，其道大光》</strong></p><p><strong>【适用主题】</strong></p><p>自立自强、描写国家变化等。</p><p><strong>【释义】</strong></p><p>来源于梁启超的《少年中国说》，意思是：红日刚刚升起，道路充满霞光。可用来指光明的前程，青年的蓬勃朝气。</p><p><img src="https://pic3.zhimg.com/v2-46a0651c37915354de0f7a8ca3af647b_720w.jpg?source=d16d100b"></p><p><strong>07</strong></p><p><strong>《吹灭读书灯，一身都是月》</strong></p><p><strong>【适用主题】</strong></p><p>读书状态的静谧安宁，诗意的生活等。</p><p><strong>【释义】</strong></p><p>桂苓曾在《吹灭读书灯》中写下这句话，意为读书至深夜，将灯吹灭后，就只有月亮陪伴了。</p><p><strong>08</strong></p><p><strong>《落花无言，人淡如菊》</strong></p><p><strong>【适用主题】</strong></p><p>随遇而安，淡泊宁静；行到水穷处，坐看云起时的从容等。</p><p><strong>【释义】</strong></p><p>出自唐代司空图所著的《诗品二十四则·典雅》，大意为：花片轻落，默默无语，幽人恬淡，宛如秋菊。落花无言是经过沧桑波折后的了然：成败宛如花一般，绚烂时是积蓄的必然，凋谢时亦是自然的选择。这是对人生起落的淡定和从容——落花无言而有言，人淡如菊心亦素。</p><p><img src="https://pica.zhimg.com/v2-dae6ea64140290b87ab76ea20249dd3b_720w.jpg?source=d16d100b"></p><p><strong>09</strong></p><p><strong>《且将新火试新茶，诗酒趁年华》</strong></p><p><strong>【适用主题】</strong></p><p>活在当下，乐观积极的人生态度等。</p><p><strong>【释义】</strong></p><p>出自苏轼《望江南·超然台作》，意思为：姑且点上新火来烹煮一杯刚采的新茶，作诗醉酒都要趁年华尚在啊。</p><p><strong>10</strong></p><p><strong>《岁月失语，惟石能言》</strong></p><p><strong>【适用主题】</strong></p><p>有关文化传承，文化保护，珍重历史等。</p><p><strong>【释义】</strong></p><p>出自冯骥才。“岁月失语”，意为岁月悄然流逝，仿佛是一个失忆者，对过去只字不提。“惟石能言”，“石”不仅指的是贺兰山岩画，也是历史留给我们的各种名胜古迹、传统技艺和民族精神，他们都是历史的载体，是历史的最佳发言人。</p><p><strong>11</strong></p><p><strong>《凡是过去，皆为序章》</strong></p><p><strong>【适用主题】</strong></p><p>规劝人们不必沉溺于过去的悲伤，也不要沉溺于过去的美好，活在当下。</p><p><strong>【释义】</strong></p><p>原句出自于莎士比亚戏剧《暴风雨》：What’s past is prologue.无论过去如何，那都只不过是人生的前奏，不必沉溺其中，当下才是人生真正的开始，人生新的篇章将在此刻开始谱写。</p><p><strong>12</strong></p><p><strong>《以痛吻我，报之以歌》</strong></p><p><strong>【适用主题】</strong></p><p>关于豁达乐观的心态、满怀希望地面对挫折与困难、宽容与释怀、痛斥反社会倾向的行为等。</p><p><strong>【释义】</strong></p><p>化用自泰戈尔的“世界吻我以痛，要我报之以歌。”意思是人活在这个世上，少不了伤痛和泪水，但我们能用一种包容豁达的态度，笑对苦累，一路高歌。</p><p><img src="https://pic3.zhimg.com/v2-9af8052053c10dcdf66f04f7ae2145c1_720w.jpg?source=d16d100b"></p><p><strong>13</strong></p><p><strong>《青山一道同风雨》</strong></p><p><strong>【适用主题】</strong></p><p>同甘共苦的情谊，小如友情、亲情；大如家国情，国与国之间的友谊。</p><p><strong>【释义】</strong></p><p>出自王昌龄的《送柴侍御》，原句为：青山一道同云雨， 明月何曾是两乡。意思为：你我一路相连的青山共沐风雨，同顶一轮明月又何曾身处两地呢？</p>]]></content>
    
    
    <categories>
      
      <category>诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诗词</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
